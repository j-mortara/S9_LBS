// automatically generated by Xtext
grammar fr.unice.polytech.idm.xtext.SmartHomeDSL with org.eclipse.xtext.common.Terminals

import "http://www.example.org/smartHome" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SmartHome returns SmartHome:
    'SmartHome'
    '{'
        'sensorTypes' '{' sensorTypes+=SensorType ( "," sensorTypes+=SensorType)* '}'
        locations+=Location ( "," locations+=Location)*
        'rules' '{' rules+=Rule ( "," rules+=Rule)* '}'
        
    '}';

Location returns Location:
    {Location}
    'Location'
    name=EString
    '{'
    ( sensors+=Sensor ( "," sensors+=Sensor)* )?
    '}';

SensorType returns SensorType:
    IntegerSensorType|BooleanSensorType;

IntegerSensorType returns IntegerSensorType:
    {IntegerSensorType}
    name="int";
    
BooleanSensorType returns BooleanSensorType:
    {BooleanSensorType}
    name="bool";
    
EString returns ecore::EString:
    STRING | ID;

Sensor returns Sensor:
	IntegerSensor|BooleanSensor;
    
IntegerSensor returns IntegerSensor:
	'Sensor' name=EString sensorType=[IntegerSensorType|EString] '(' dataFile=EString ')';
    
BooleanSensor returns BooleanSensor:
	'Sensor' name=EString sensorType=[BooleanSensorType|EString] '(' dataFile=EString ')';
                
Rule returns Rule:
	'if' conditions+=Condition ( 'and' conditions+=Condition)* 'for' duration=Duration 'then' event=Event;

Condition returns Condition:
	IntegerCondition|BooleanCondition;

IntegerCondition returns IntegerCondition:
	sensor=[IntegerSensor|EString] operator=IntegerOperator operand=EInt;

BooleanCondition returns BooleanCondition:
	sensor=[BooleanSensor|EString] operator=BooleanOperator operand=EBoolean;

EInt returns ecore::EInt: 
	INT;

EBoolean returns ecore::EBoolean: 
	'true'|'false';

enum IntegerOperator: 
	EQUALS='='|INFERIOR='<'|SUPERIOR='>';

enum BooleanOperator: 
	IS="is"|IS_NOT="is not";

enum DurationUnit:
	MINUTE='min'|SECOND='s';

Duration returns Duration:
	 value=EInt unit=DurationUnit;

Event returns Event:
	description=EString ;

